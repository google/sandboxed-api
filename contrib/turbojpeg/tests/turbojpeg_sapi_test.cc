// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <gflags/gflags.h>
#include <glog/logging.h>
#include <gmock/gmock.h>
#include <gtest/gtest.h>
#include <turbojpeg.h>

#include <cstdlib>
#include <fstream>
#include <iostream>

#include "../turbojpeg_sapi.h"  // NOLINT(build/include)
#include "sandboxed_api/testing.h"
#include "sandboxed_api/util/fileops.h"
#include "sandboxed_api/util/status_matchers.h"
#include "turbojpeg_sapi.sapi.h"  // NOLINT(build/include)

namespace {

using ::sapi::IsOk;
using ::testing::Eq;
using ::testing::Not;
using ::testing::NotNull;
using ::testing::StrEq;

class TurboJpegSapiSandboxTest : public testing::Test {
 protected:
  static void SetUpTestSuite() {
    sandbox_ = new TurboJpegSapiSandbox();
    ASSERT_THAT(sandbox_->Init(), IsOk());
    api_ = new turbojpeg_sapi::TurboJPEGApi(sandbox_);
  }
  static void TearDownTestSuite() {
    delete api_;
    delete sandbox_;
  }
  static turbojpeg_sapi::TurboJPEGApi* api_;
  static TurboJpegSapiSandbox* sandbox_;
};

turbojpeg_sapi::TurboJPEGApi* TurboJpegSapiSandboxTest::api_;
TurboJpegSapiSandbox* TurboJpegSapiSandboxTest::sandbox_;

// clang-format off
constexpr uint8_t image[2412] = {
  0x2f, 0x2f, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
  0x20, 0x32, 0x30, 0x32, 0x32, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
  0x20, 0x4c, 0x4c, 0x43, 0x0a, 0x2f, 0x2f, 0x0a, 0x2f, 0x2f, 0x20, 0x4c,
  0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65,
  0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65,
  0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56, 0x65,
  0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x28, 0x74,
  0x68, 0x65, 0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22,
  0x29, 0x3b, 0x0a, 0x2f, 0x2f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61,
  0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68,
  0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65,
  0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
  0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
  0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x2f,
  0x2f, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x62,
  0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20,
  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e,
  0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x2f, 0x2f, 0x0a, 0x2f, 0x2f, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
  0x77, 0x77, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72,
  0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c,
  0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x2f,
  0x2f, 0x0a, 0x2f, 0x2f, 0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20,
  0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
  0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c,
  0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64,
  0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69,
  0x6e, 0x67, 0x2c, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
  0x0a, 0x2f, 0x2f, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
  0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68,
  0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73,
  0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
  0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49,
  0x53, 0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c, 0x0a, 0x2f, 0x2f,
  0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20, 0x57, 0x41, 0x52,
  0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20, 0x43,
  0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46,
  0x20, 0x41, 0x4e, 0x59, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20, 0x65,
  0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
  0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64,
  0x2e, 0x0a, 0x2f, 0x2f, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65,
  0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72,
  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
  0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67,
  0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72,
  0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64,
  0x0a, 0x2f, 0x2f, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69,
  0x6f, 0x6e, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68,
  0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a,
  0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x67, 0x66,
  0x6c, 0x61, 0x67, 0x73, 0x2f, 0x67, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e,
  0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20,
  0x3c, 0x67, 0x6c, 0x6f, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
  0x67, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
  0x65, 0x20, 0x3c, 0x63, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a,
  0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x66, 0x73,
  0x74, 0x72, 0x65, 0x61, 0x6d, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c,
  0x75, 0x64, 0x65, 0x20, 0x3c, 0x69, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61,
  0x6d, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20,
  0x3c, 0x67, 0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x67, 0x6d, 0x6f, 0x63, 0x6b,
  0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
  0x20, 0x3c, 0x67, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x67, 0x74, 0x65, 0x73,
  0x74, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
  0x65, 0x20, 0x22, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x65, 0x64,
  0x5f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x66, 0x69,
  0x6c, 0x65, 0x6f, 0x70, 0x73, 0x2e, 0x68, 0x22, 0x0a, 0x0a, 0x23, 0x69,
  0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x74, 0x75, 0x72, 0x62,
  0x6f, 0x6a, 0x70, 0x65, 0x67, 0x5f, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x73,
  0x61, 0x70, 0x69, 0x2e, 0x68, 0x22, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x4e,
  0x4f, 0x4c, 0x49, 0x4e, 0x54, 0x28, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f,
  0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x29, 0x0a, 0x23, 0x69, 0x6e,
  0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x22, 0x2e, 0x2e, 0x2f, 0x74, 0x75,
  0x72, 0x62, 0x6f, 0x6a, 0x70, 0x65, 0x67, 0x5f, 0x73, 0x61, 0x70, 0x69,
  0x2e, 0x68, 0x22, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x4e, 0x4f, 0x4c, 0x49,
  0x4e, 0x54, 0x28, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x69, 0x6e, 0x63,
  0x6c, 0x75, 0x64, 0x65, 0x29, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75,
  0x64, 0x65, 0x20, 0x3c, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x65,
  0x64, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
  0x67, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
  0x65, 0x20, 0x3c, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x65, 0x64,
  0x5f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x73, 0x74,
  0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
  0x73, 0x2e, 0x68, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
  0x65, 0x20, 0x22, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x6a, 0x70, 0x65, 0x67,
  0x5f, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65,
  0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x68, 0x22, 0x0a, 0x0a,
  0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x0a,
  0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x3a, 0x3a, 0x74, 0x65, 0x73,
  0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x53, 0x74, 0x72, 0x45, 0x71, 0x3b,
  0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x3a, 0x3a, 0x74, 0x65, 0x73,
  0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x4e, 0x6f, 0x74, 0x3b, 0x0a, 0x75,
  0x73, 0x69, 0x6e, 0x67, 0x20, 0x3a, 0x3a, 0x73, 0x61, 0x70, 0x69, 0x3a,
  0x3a, 0x49, 0x73, 0x4f, 0x6b, 0x3b, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
  0x73, 0x20, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a, 0x70, 0x65, 0x67, 0x53,
  0x61, 0x70, 0x69, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x65,
  0x73, 0x74, 0x20, 0x3a, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20,
  0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x54, 0x65, 0x73,
  0x74, 0x20, 0x7b, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
  0x65, 0x64, 0x3a, 0x0a, 0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
  0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x53, 0x65, 0x74, 0x55, 0x70, 0x54,
  0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x28, 0x29, 0x20, 0x7b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
  0x5f, 0x20, 0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x54, 0x75, 0x72, 0x62,
  0x6f, 0x4a, 0x70, 0x65, 0x67, 0x53, 0x61, 0x70, 0x69, 0x53, 0x61, 0x6e,
  0x64, 0x62, 0x6f, 0x78, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x48, 0x41, 0x54, 0x28,
  0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x2d, 0x3e, 0x49, 0x6e,
  0x69, 0x74, 0x28, 0x29, 0x2c, 0x20, 0x49, 0x73, 0x4f, 0x6b, 0x28, 0x29,
  0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x61, 0x70, 0x69, 0x5f, 0x20,
  0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a,
  0x50, 0x45, 0x47, 0x41, 0x70, 0x69, 0x28, 0x73, 0x61, 0x6e, 0x64, 0x62,
  0x6f, 0x78, 0x5f, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20,
  0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20,
  0x54, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x73, 0x74,
  0x53, 0x75, 0x69, 0x74, 0x65, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20,
  0x20, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x70, 0x69,
  0x5f, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
  0x65, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x3b, 0x0a,
  0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
  0x20, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a, 0x50, 0x45, 0x47, 0x41, 0x70,
  0x69, 0x2a, 0x20, 0x61, 0x70, 0x69, 0x5f, 0x3b, 0x0a, 0x20, 0x70, 0x72,
  0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x0a, 0x20, 0x20, 0x73, 0x74, 0x61,
  0x74, 0x69, 0x63, 0x20, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a, 0x70, 0x65,
  0x67, 0x53, 0x61, 0x70, 0x69, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
  0x2a, 0x20, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x3b, 0x0a,
  0x7d, 0x3b, 0x0a, 0x0a, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a, 0x50, 0x45,
  0x47, 0x41, 0x70, 0x69, 0x2a, 0x20, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a,
  0x70, 0x65, 0x67, 0x53, 0x61, 0x70, 0x69, 0x53, 0x61, 0x6e, 0x64, 0x62,
  0x6f, 0x78, 0x54, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x61, 0x70, 0x69, 0x5f,
  0x3b, 0x0a, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a, 0x70, 0x65, 0x67, 0x53,
  0x61, 0x70, 0x69, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2a, 0x20,
  0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a, 0x70, 0x65, 0x67, 0x53, 0x61, 0x70,
  0x69, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x65, 0x73, 0x74,
  0x3a, 0x3a, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x3b, 0x0a,
  0x0a, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x28, 0x54, 0x75, 0x72, 0x62,
  0x6f, 0x4a, 0x70, 0x65, 0x67, 0x53, 0x61, 0x70, 0x69, 0x53, 0x61, 0x6e,
  0x64, 0x62, 0x6f, 0x78, 0x54, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x43, 0x6f,
  0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x29, 0x20, 0x7b, 0x0a,
  0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73,
  0x65, 0x72, 0x74, 0x28, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x69, 0x73, 0x5f,
  0x73, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x3c, 0x64, 0x65, 0x63, 0x6c, 0x74,
  0x79, 0x70, 0x65, 0x28, 0x61, 0x70, 0x69, 0x5f, 0x2d, 0x3e, 0x74, 0x6a,
  0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
  0x28, 0x29, 0x29, 0x2c, 0x20, 0x61, 0x62, 0x73, 0x6c, 0x3a, 0x3a, 0x53,
  0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x3c, 0x76, 0x6f, 0x69, 0x64,
  0x20, 0x2a, 0x3e, 0x3e, 0x2c, 0x20, 0x22, 0x62, 0x75, 0x67, 0x22, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x61, 0x62, 0x73, 0x6c, 0x3a, 0x3a, 0x53, 0x74,
  0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x3c, 0x76, 0x6f, 0x69, 0x64, 0x20,
  0x2a, 0x3e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
  0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x61,
  0x77, 0x20, 0x3d, 0x20, 0x61, 0x70, 0x69, 0x5f, 0x2d, 0x3e, 0x74, 0x6a,
  0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
  0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54,
  0x5f, 0x54, 0x48, 0x41, 0x54, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
  0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
  0x5f, 0x72, 0x61, 0x77, 0x2c, 0x20, 0x49, 0x73, 0x4f, 0x6b, 0x28, 0x29,
  0x29, 0x3b, 0x0a, 0x20, 0x20, 0x74, 0x6a, 0x68, 0x61, 0x6e, 0x64, 0x6c,
  0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
  0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x63,
  0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
  0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x61,
  0x6c, 0x75, 0x65, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x41, 0x53, 0x53,
  0x45, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x28, 0x63, 0x6f, 0x6d,
  0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e,
  0x64, 0x6c, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x70,
  0x74, 0x72, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x41, 0x53, 0x53, 0x45, 0x52,
  0x54, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x28, 0x74, 0x6a, 0x43, 0x6f,
  0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x0a, 0x7d, 0x0a, 0x0a, 0x54,
  0x45, 0x53, 0x54, 0x5f, 0x46, 0x28, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4a,
  0x70, 0x65, 0x67, 0x53, 0x61, 0x70, 0x69, 0x53, 0x61, 0x6e, 0x64, 0x62,
  0x6f, 0x78, 0x54, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x44, 0x65, 0x63, 0x6f,
  0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x29, 0x20, 0x7b, 0x0a,
  0x20, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x73, 0x73,
  0x65, 0x72, 0x74, 0x28, 0x73, 0x74, 0x64, 0x3a, 0x3a, 0x69, 0x73, 0x5f,
  0x73, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x3c, 0x64, 0x65, 0x63, 0x6c, 0x74,
  0x79, 0x70, 0x65, 0x28, 0x61, 0x70, 0x69, 0x5f, 0x2d, 0x3e, 0x74, 0x6a,
  0x49, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
  0x73, 0x73, 0x28, 0x29, 0x29, 0x2c, 0x20, 0x61, 0x62, 0x73, 0x6c, 0x3a,
  0x3a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x3c, 0x76, 0x6f,
  0x69, 0x64, 0x20, 0x2a, 0x3e, 0x3e, 0x2c, 0x20, 0x22, 0x62, 0x75, 0x67,
  0x22, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x61, 0x62, 0x73, 0x6c, 0x3a, 0x3a,
  0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x3c, 0x76, 0x6f, 0x69,
  0x64, 0x20, 0x2a, 0x3e, 0x20, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72,
  0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
  0x65, 0x5f, 0x72, 0x61, 0x77, 0x20, 0x3d, 0x20, 0x61, 0x70, 0x69, 0x5f,
  0x2d, 0x3e, 0x74, 0x6a, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x63, 0x6f,
  0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20,
  0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x48, 0x41, 0x54, 0x28,
  0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
  0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x77,
  0x2c, 0x20, 0x49, 0x73, 0x4f, 0x6b, 0x28, 0x29, 0x29, 0x3b, 0x0a, 0x20,
  0x20, 0x74, 0x6a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x64, 0x65,
  0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
  0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x64, 0x65, 0x63,
  0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
  0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x61,
  0x6c, 0x75, 0x65, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x41, 0x53, 0x53,
  0x45, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x28, 0x64, 0x65, 0x63,
  0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
  0x61, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x6e, 0x75, 0x6c,
  0x6c, 0x70, 0x74, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x00,
};
constexpr size_t kImageLen = sizeof(image);
// clang-format on

TEST_F(TurboJpegSapiSandboxTest, Compressor) {
  absl::StatusOr<void*> compression_handle_raw = api_->tjInitCompress();
  ASSERT_THAT(compression_handle_raw, IsOk());
  ASSERT_THAT(compression_handle_raw.value(), NotNull());
  sapi::v::RemotePtr compression_handle{compression_handle_raw.value()};

  sapi::v::Array<unsigned char> array{sizeof image};
  std::memcpy(array.GetData(), image, sizeof image);

  sapi::v::GenericPtr buffer;
  unsigned long actual_length;
  {
    sapi::v::ULong length{0};
    auto result = api_->tjCompress2(&compression_handle, array.PtrBefore(), 12,
                                    36, 67, TJPF_RGB, buffer.PtrAfter(),
                                    length.PtrBoth(), TJSAMP_444, 10, 0);
    ASSERT_THAT(result, IsOk());
    EXPECT_THAT(result.value(), Eq(0));
    if (result.value() != 0) {
      auto errmsg = api_->tjGetErrorStr2(compression_handle.PtrNone());
      ASSERT_THAT(errmsg, IsOk());
      auto errstr =
          sandbox_->GetCString(sapi::v::RemotePtr(errmsg.value()), 256);
      ASSERT_THAT(errstr, IsOk());
      ASSERT_THAT(errstr.value(), StrEq(""));
      ASSERT_TRUE(false);
    }
    ASSERT_TRUE(buffer.GetValue());
    ASSERT_TRUE(buffer.GetRemote());
    ASSERT_TRUE((actual_length = length.GetValue()));
  }
  auto value = buffer.GetValue();

  auto result = api_->tjDestroy(&compression_handle);
  ASSERT_THAT(result, IsOk());
  ASSERT_THAT(result.value(), Eq(0));

  absl::StatusOr<void*> decompression_handle_raw = api_->tjInitDecompress();
  ASSERT_THAT(decompression_handle_raw, IsOk());
  ASSERT_THAT(decompression_handle_raw.value(), NotNull());
  sapi::v::RemotePtr decompression_handle{decompression_handle_raw.value()};

  sapi::v::Int width{0};
  sapi::v::Int height{0};
  sapi::v::Int subsamp{0};
  sapi::v::Int colorspace{0};
  sapi::v::RemotePtr buffer_addr{reinterpret_cast<void*>(buffer.GetValue())};
  result = api_->tjDecompressHeader3(
      &decompression_handle, &buffer_addr, actual_length, width.PtrAfter(),
      height.PtrAfter(), subsamp.PtrAfter(), colorspace.PtrAfter());
  ASSERT_THAT(result, IsOk());
  EXPECT_THAT(result.value(), Eq(0));

  if (result.value() != 0) {
    auto errmsg = api_->tjGetErrorStr2(compression_handle.PtrNone());
    ASSERT_THAT(errmsg, IsOk());
    auto errstr = sandbox_->GetCString(sapi::v::RemotePtr(errmsg.value()), 256);
    ASSERT_THAT(errstr, IsOk());
    ASSERT_THAT(errstr.value(), StrEq(""));
    ASSERT_TRUE(false);
  }
  ASSERT_THAT(width.GetValue(), Eq(12));
  ASSERT_THAT(height.GetValue(), Eq(67));
  ASSERT_THAT(subsamp.GetValue(), Eq(TJSAMP_444));
  ASSERT_THAT(colorspace.GetValue(), Eq(TJCS_YCbCr));
  static_assert(sizeof image == 12 * 67 * 3, "wrong array size");

  auto arr = sapi::v::Array<unsigned char>(12 * 67 * 3);
  result =
      api_->tjDecompress2(&decompression_handle, &buffer_addr, actual_length,
                          arr.PtrAfter(), 12, 36, 67, TJCS_RGB, 0);
  ASSERT_THAT(result, IsOk());
  ASSERT_THAT(result.value(), Eq(0));

  result = api_->tjDestroy(&decompression_handle);
  ASSERT_THAT(result, IsOk());
  ASSERT_THAT(result.value(), Eq(0));
}
}  // namespace
